2 clones in 1 file

srclibservices
__tests__UserServiceHelpers.test.ts
 : 290 - 299

288
    it('should filter out null users', () => {
289
      const [user1, user2] = createMockUsers(2);
290
      const users = [user1, null, user2];
291

292
      const result = convertLeansUsersToPublic(users);
293

294
      expect(result).toHaveLength(2);
295
      expect(result[0].id).toBe('user1');
296
      expect(result[1].id).toBe('user2');
297
    });
298

299
    it('should filter out undefined users', () => {
300
      const [user1, user2] = createMockUsers(2);
301
      const users = [user1, undefined, user2];
srclibservices
__tests__UserServiceHelpers.test.ts
 : 301 - 310

299
    it('should filter out undefined users', () => {
300
      const [user1, user2] = createMockUsers(2);
301
      const users = [user1, undefined, user2];
302

303
      const result = convertLeansUsersToPublic(users);
304

305
      expect(result).toHaveLength(2);
306
      expect(result[0].id).toBe('user1');
307
      expect(result[1].id).toBe('user2');
308
    });
309

310
    it('should handle users without _id field', () => {
311
      const user = createMockUser({
312
        _id: undefined,
New duplication
2 clones in 1 file

srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 275 - 281

273
      testSetup.setupMocks(mockUser, mockLean);
274

275
      const result = await executeUserQuery(query, skip, limit);
276

277
      expectQueryChainCalls(mockUser, mockSort, mockSkip, mockLimit, mockLean, query, skip, limit);
278
      expectPaginatedResult(result, testSetup.mockUsers, testSetup.total);
279
    });
280

281
    it('should handle empty query in both environments', async () => {
282
      const query = {};
283
      const skip = 0;
srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 173 - 179

171
      testSetup.setupMocks(mockUser, mockLean);
172

173
      const result = await executeFullQuery(query, skip, limit);
174

175
      expectQueryChainCalls(mockUser, mockSort, mockSkip, mockLimit, mockLean, query, skip, limit);
176
      expectPaginatedResult(result, testSetup.mockUsers, testSetup.total);
177
    });
178

179
    it('should handle zero skip and limit', async () => {
180
      const query = { role: 'admin' };
181
      const skip = 0;
New duplication
2 clones in 1 file

srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 377 - 388

375
    });
376

377
    it('should handle zero total with non-zero limit', () => {
378
      const users: any[] = [];
379
      const publicUsers: PublicUser[] = [];
380
      const total = 0;
381
      const page = 1;
382
      const limit = 10;
383

384
      mockedConvertLeansUsersToPublic.mockReturnValue(publicUsers);
385

386
      const result = formatPaginatedResult(users, total, page, limit);
387

388
      expectPaginationValues(result.pagination, page, limit, total, 0);
389
    });
srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 320 - 331

318
    });
319

320
    it('should handle empty users array', () => {
321
      const users: any[] = [];
322
      const publicUsers: PublicUser[] = [];
323
      const total = 0;
324
      const page = 1;
325
      const limit = 10;
326

327
      mockedConvertLeansUsersToPublic.mockReturnValue(publicUsers);
328

329
      const result = formatPaginatedResult(users, total, page, limit);
330

331
      expect(result.data).toEqual([]);
332
      expectPaginationValues(result.pagination, page, limit, total, 0);
333
    });
New duplication
2 clones in 1 file

srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 183 - 190

srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 169 - 176

New duplication
2 clones in 1 file

srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 169 - 179

167
      const skip = 10;
168
      const limit = 5;
169
      const testSetup = setupQueryTest(createMockUsers(1), 25);
170

171
      testSetup.setupMocks(mockUser, mockLean);
172

173
      const result = await executeFullQuery(query, skip, limit);
174

175
      expectQueryChainCalls(mockUser, mockSort, mockSkip, mockLimit, mockLean, query, skip, limit);
176
      expectPaginatedResult(result, testSetup.mockUsers, testSetup.total);
177
    });
178

179
    it('should handle zero skip and limit', async () => {
180
      const query = { role: 'admin' };
181
      const skip = 0;
srclibservices
__tests__UserServiceQueryHelpers.test.ts
 : 197 - 207

195
      const skip = 0;
196
      const limit = 10;
197
      const testSetup = setupQueryTest(createMockUsers(2));
198

199
      testSetup.setupMocks(mockUser, mockLean);
200

201
      const result = await executeFullQuery(query, skip, limit);
202

203
      expectQueryChainCalls(mockUser, mockSort, mockSkip, mockLimit, mockLean, query, skip, limit);
204
      expectPaginatedResult(result, testSetup.mockUsers, testSetup.total);
205
    });
206

207
    it('should handle Promise.all execution', async () => {
208
      const query = { role: 'user' };
209
      const skip = 5;
New duplication
2 clones in 1 file

srclibservices
__tests__UserServiceHelpers.test.ts
 : 277 - 284

275
        ...user,
276
        passwordHash: `hash${i + 1}`,
277
      }));
278

279
      const result = convertLeansUsersToPublic(users);
280

281
      expect(result).toHaveLength(2);
282
      expect(result[0].id).toBe('user1');
283
      expect(result[1].id).toBe('user2');
284
      expectSensitiveFieldsRemoved(result[0]);
285
      expectSensitiveFieldsRemoved(result[1]);
286
    });
srclibservices
__tests__UserServiceHelpers.test.ts
 : 290 - 297

288
    it('should filter out null users', () => {
289
      const [user1, user2] = createMockUsers(2);
290
      const users = [user1, null, user2];
291

292
      const result = convertLeansUsersToPublic(users);
293

294
      expect(result).toHaveLength(2);
295
      expect(result[0].id).toBe('user1');
296
      expect(result[1].id).toBe('user2');
297
    });
298

299
    it('should filter out undefined users', () => {