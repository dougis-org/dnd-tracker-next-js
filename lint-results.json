
> dnd-tracker-next-js@0.2.0 lint
> next lint --format=json

[{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/HistoryComponents.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":138,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"query"},"fix":{"range":[3719,3732],"text":""},"desc":"Remove unused variable 'query'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  ChevronDown,\n  ChevronUp,\n  Search,\n  Download,\n  RotateCcw,\n  AlertCircle,\n} from 'lucide-react';\nimport {\n  HistoryEntry,\n  HistoryStats,\n  formatHistoryEvent,\n  createHighlightedText,\n  formatEventTimestamp,\n} from './history-utils';\n\ninterface HistoryErrorStateProps {\n  error: string;\n  onRetry?: () => void;\n}\n\nexport function HistoryErrorState({ error, onRetry }: HistoryErrorStateProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <AlertCircle className=\"h-5 w-5 text-destructive\" />\n          Round History\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Alert variant=\"destructive\">\n          <AlertDescription className=\"flex items-center justify-between\">\n            <span>{error}</span>\n            {onRetry && (\n              <Button variant=\"outline\" size=\"sm\" onClick={onRetry}>\n                <RotateCcw className=\"h-4 w-4 mr-1\" />\n                Retry\n              </Button>\n            )}\n          </AlertDescription>\n        </Alert>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface HistoryHeaderProps {\n  stats: HistoryStats;\n  searchable: boolean;\n  exportable: boolean;\n  isSearchExpanded: boolean;\n  isCollapsed: boolean;\n  onSearchToggle: () => void;\n  onExport: () => void;\n  onToggle: () => void;\n}\n\nexport function HistoryHeader({\n  stats,\n  searchable,\n  exportable,\n  isSearchExpanded,\n  isCollapsed,\n  onSearchToggle,\n  onExport,\n  onToggle,\n}: HistoryHeaderProps) {\n  return (\n    <CardHeader className=\"pb-3\">\n      <div className=\"flex items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          Round History\n          {stats.totalRounds > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {stats.totalRounds} rounds recorded\n            </Badge>\n          )}\n        </CardTitle>\n\n        <div className=\"flex items-center gap-2\">\n          {searchable && stats.totalRounds > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onSearchToggle}\n              className=\"text-muted-foreground hover:text-foreground\"\n              aria-label={isSearchExpanded ? 'Hide search' : 'Show search'}\n            >\n              <Search className=\"h-4 w-4\" />\n            </Button>\n          )}\n\n          {exportable && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onExport}\n              disabled={stats.totalRounds === 0}\n              className=\"text-muted-foreground hover:text-foreground\"\n              aria-label=\"Export history\"\n            >\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          )}\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggle}\n            disabled={stats.totalRounds === 0}\n            className=\"text-muted-foreground hover:text-foreground\"\n            aria-expanded={!isCollapsed}\n            aria-label={isCollapsed ? 'Show history' : 'Hide history'}\n          >\n            {isCollapsed ? (\n              <ChevronDown className=\"h-4 w-4\" />\n            ) : (\n              <ChevronUp className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n    </CardHeader>\n  );\n}\n\ninterface HistorySearchInputProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n}\n\nexport function HistorySearchInput({ searchQuery, onSearchChange }: HistorySearchInputProps) {\n  return (\n    <div className=\"px-6 pb-3\">\n      <Input\n        placeholder=\"Search history...\"\n        value={searchQuery}\n        onChange={(e) => onSearchChange(e.target.value)}\n        className=\"text-sm\"\n      />\n    </div>\n  );\n}\n\ninterface HistoryContentProps {\n  stats: HistoryStats;\n  displayHistory: HistoryEntry[];\n  filteredHistory: HistoryEntry[];\n  searchQuery: string;\n  virtualized: boolean;\n  maxVisibleRounds: number;\n  roundFormatter: (_round: number) => string;\n  eventFormatter?: (_event: string) => string;\n  emptyMessage: string;\n  onClearSearch: () => void;\n}\n\nexport function HistoryContent({\n  stats,\n  displayHistory,\n  filteredHistory,\n  searchQuery,\n  virtualized,\n  maxVisibleRounds,\n  roundFormatter,\n  eventFormatter,\n  emptyMessage,\n  onClearSearch,\n}: HistoryContentProps) {\n  // Empty state\n  if (stats.totalRounds === 0) {\n    return (\n      <CardContent>\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <p>{emptyMessage}</p>\n        </div>\n      </CardContent>\n    );\n  }\n\n  // No search results\n  if (searchQuery && filteredHistory.length === 0) {\n    return (\n      <CardContent>\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <p>No matching events found</p>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClearSearch} className=\"mt-2\">\n            Clear search\n          </Button>\n        </div>\n      </CardContent>\n    );\n  }\n\n  return (\n    <CardContent>\n      <div className=\"space-y-4\">\n        {/* Virtualization notice */}\n        {virtualized && filteredHistory.length > maxVisibleRounds && (\n          <Alert>\n            <AlertDescription>\n              Showing the most recent {maxVisibleRounds} of {filteredHistory.length} rounds.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* History list */}\n        <HistoryList\n          displayHistory={displayHistory}\n          searchQuery={searchQuery}\n          roundFormatter={roundFormatter}\n          eventFormatter={eventFormatter}\n        />\n      </div>\n\n      {/* Screen reader announcements */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        <span aria-label=\"History expanded\">\n          History expanded, showing {displayHistory.length} rounds\n        </span>\n      </div>\n    </CardContent>\n  );\n}\n\ninterface HistoryListProps {\n  displayHistory: HistoryEntry[];\n  searchQuery: string;\n  roundFormatter: (_round: number) => string;\n  eventFormatter?: (_event: string) => string;\n}\n\nexport function HistoryList({\n  displayHistory,\n  searchQuery,\n  roundFormatter,\n  eventFormatter,\n}: HistoryListProps) {\n  return (\n    <div role=\"list\" className=\"space-y-4\">\n      {displayHistory.map((entry) => (\n        <HistoryRoundEntry\n          key={entry.round}\n          entry={entry}\n          searchQuery={searchQuery}\n          roundFormatter={roundFormatter}\n          eventFormatter={eventFormatter}\n        />\n      ))}\n    </div>\n  );\n}\n\ninterface HistoryRoundEntryProps {\n  entry: HistoryEntry;\n  searchQuery: string;\n  roundFormatter: (_round: number) => string;\n  eventFormatter?: (_event: string) => string;\n}\n\nexport function HistoryRoundEntry({\n  entry,\n  searchQuery,\n  roundFormatter,\n  eventFormatter,\n}: HistoryRoundEntryProps) {\n  return (\n    <div\n      role=\"listitem\"\n      data-testid=\"round-section\"\n      className=\"border rounded-lg p-3 bg-muted/20\"\n    >\n      <h4 className=\"font-medium text-sm mb-2 flex items-center gap-2\">\n        {roundFormatter(entry.round)}\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {entry.events.length} events\n        </Badge>\n      </h4>\n\n      <ul className=\"space-y-1 text-sm\">\n        {entry.events.map((event, eventIndex) => (\n          <HistoryEventItem\n            key={eventIndex}\n            event={event}\n            searchQuery={searchQuery}\n            eventFormatter={eventFormatter}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\ninterface HistoryEventItemProps {\n  event: string | { text: string; timestamp?: Date };\n  searchQuery: string;\n  eventFormatter?: (_event: string) => string;\n}\n\nexport function HistoryEventItem({ event, searchQuery, eventFormatter }: HistoryEventItemProps) {\n  const formatted = formatHistoryEvent(event, eventFormatter);\n\n  return (\n    <li className=\"flex items-center justify-between\">\n      <span className=\"text-muted-foreground\">\n        {createHighlightedText(formatted.text, searchQuery)}\n      </span>\n      {formatted.timestamp && (\n        <span className=\"text-xs text-muted-foreground font-mono\">\n          {formatEventTimestamp(formatted.timestamp)}\n        </span>\n      )}\n    </li>\n  );\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/TrackerComponents.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[51,56],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[55,68],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":45,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[1063,1076],"text":""},"desc":"Remove unused variable 'value'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Edit3,\n  Save,\n  X,\n  TrendingUp,\n  AlertTriangle,\n  Download,\n  Zap,\n} from 'lucide-react';\nimport { IEncounter } from '@/lib/models/encounter/interfaces';\nimport {\n  Effect,\n  Trigger,\n  SessionSummary,\n  formatDuration,\n  formatTimeUntilTrigger,\n  formatRoundSummary,\n} from './round-utils';\nimport {\n  findParticipantName,\n  calculateEffectRemaining,\n  getEffectClassName,\n} from './tracker-utils';\n\ninterface RoundHeaderProps {\n  currentRound: number;\n  isEditingRound: boolean;\n  editRoundValue: string;\n  editError: string | null;\n  combatPhase: string;\n  isInOvertime: boolean;\n  onEditRound: () => void;\n  onSaveRound: () => void;\n  onCancelEdit: () => void;\n  onEditValueChange: (value: string) => void;\n  onExport?: () => void;\n}\n\nexport function RoundHeader({\n  currentRound,\n  isEditingRound,\n  editRoundValue,\n  editError,\n  combatPhase,\n  isInOvertime,\n  onEditRound,\n  onSaveRound,\n  onCancelEdit,\n  onEditValueChange,\n  onExport,\n}: RoundHeaderProps) {\n  return (\n    <CardHeader className=\"pb-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          {!isEditingRound ? (\n            <>\n              <h2 role=\"heading\" aria-level={2}>\n                <CardTitle className=\"text-xl\">Round {currentRound}</CardTitle>\n              </h2>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onEditRound}\n                aria-label=\"Edit round\"\n              >\n                <Edit3 className=\"h-4 w-4\" />\n              </Button>\n            </>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"number\"\n                min=\"1\"\n                value={editRoundValue}\n                onChange={(e) => onEditValueChange(e.target.value)}\n                className=\"w-20\"\n                aria-label=\"Current round\"\n              />\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onSaveRound}\n                aria-label=\"Save\"\n              >\n                <Save className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onCancelEdit}\n                aria-label=\"Cancel\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n\n          <Badge\n            variant={isInOvertime ? \"destructive\" : \"secondary\"}\n            className=\"text-xs\"\n          >\n            {isInOvertime ? 'Overtime' : combatPhase}\n          </Badge>\n        </div>\n\n        {onExport && (\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onExport}\n              aria-label=\"Export round data\"\n            >\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {editError && (\n        <Alert variant=\"destructive\" className=\"mt-2\">\n          <AlertDescription>{editError}</AlertDescription>\n        </Alert>\n      )}\n    </CardHeader>\n  );\n}\n\ninterface RoundControlsProps {\n  currentRound: number;\n  onNextRound: () => void;\n  onPreviousRound: () => void;\n}\n\nexport function RoundControls({\n  currentRound,\n  onNextRound,\n  onPreviousRound,\n}: RoundControlsProps) {\n  return (\n    <div className=\"flex items-center justify-center gap-3\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={onPreviousRound}\n        disabled={currentRound <= 1}\n        aria-label=\"Previous round\"\n      >\n        <ChevronLeft className=\"h-4 w-4 mr-1\" />\n        Previous Round\n      </Button>\n\n      <Button\n        variant=\"default\"\n        size=\"sm\"\n        onClick={onNextRound}\n        className=\"px-6\"\n        aria-label=\"Next round\"\n      >\n        <ChevronRight className=\"h-4 w-4 mr-1\" />\n        Next Round\n      </Button>\n    </div>\n  );\n}\n\ninterface DurationDisplayProps {\n  duration: {\n    total: number;\n    average: number;\n    remaining: number | null;\n    formatted: string;\n  };\n  estimatedRoundDuration?: number;\n}\n\nexport function DurationDisplay({ duration, estimatedRoundDuration }: DurationDisplayProps) {\n  if (duration.total <= 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n      <div className=\"text-center\">\n        <div className=\"font-medium\">Total</div>\n        <div className=\"text-muted-foreground\">{duration.formatted}</div>\n      </div>\n\n      {estimatedRoundDuration && (\n        <div className=\"text-center\">\n          <div className=\"font-medium\">Per Round</div>\n          <div className=\"text-muted-foreground\">\n            ~{formatDuration(estimatedRoundDuration)}\n          </div>\n        </div>\n      )}\n\n      {duration.remaining !== null && (\n        <div className=\"text-center\">\n          <div className=\"font-medium\">Estimated</div>\n          <div className=\"text-muted-foreground\">\n            {formatDuration(duration.remaining)} remaining\n          </div>\n        </div>\n      )}\n\n      <div className=\"text-center\">\n        <div className=\"font-medium\">Average</div>\n        <div className=\"text-muted-foreground\">\n          {formatDuration(duration.average)}/round\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface EffectsSectionProps {\n  effects: Effect[];\n  effectsError?: string;\n  encounter: IEncounter | null;\n  currentRound: number;\n  effectsByParticipant: Record<string, Effect[]>;\n}\n\nexport function EffectsSection({\n  effects,\n  effectsError,\n  encounter,\n  currentRound,\n  effectsByParticipant,\n}: EffectsSectionProps) {\n  if (effects.length === 0 && !effectsError) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      <h3 className=\"font-medium text-sm flex items-center gap-2\">\n        <Zap className=\"h-4 w-4\" />\n        Active Effects\n        {effects.length > 0 && (\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {effects.length}\n          </Badge>\n        )}\n      </h3>\n\n      {effectsError && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{effectsError}</AlertDescription>\n        </Alert>\n      )}\n\n      {Object.entries(effectsByParticipant).map(([participantId, participantEffects]) => {\n        const participantName = findParticipantName(encounter, participantId);\n\n        return (\n          <div key={participantId} className=\"space-y-2\">\n            <h4 className=\"text-sm font-medium text-muted-foreground\">\n              {participantName}\n            </h4>\n\n            <div className=\"grid gap-2\">\n              {participantEffects.map((effect) => {\n                const { remaining, isExpiring } = calculateEffectRemaining(effect, currentRound);\n\n                return (\n                  <div\n                    key={effect.id}\n                    className={getEffectClassName(isExpiring)}\n                    data-expiring={isExpiring || undefined}\n                    aria-label={`${effect.name} effect on ${participantName}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{effect.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {effect.description}\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">\n                        {remaining} rounds\n                      </div>\n                      {isExpiring && (\n                        <div className=\"text-xs text-orange-600 dark:text-orange-400\">\n                          Expiring soon\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\ninterface TriggersSectionProps {\n  dueTriggers: Trigger[];\n  upcomingTriggers: Trigger[];\n  triggers: Trigger[];\n  currentRound: number;\n  duration: { average: number };\n  onTriggerAction?: (_triggerId: string) => void;\n}\n\nexport function TriggersSection({\n  dueTriggers,\n  upcomingTriggers,\n  triggers,\n  currentRound,\n  duration,\n  onTriggerAction,\n}: TriggersSectionProps) {\n  if (dueTriggers.length === 0 && upcomingTriggers.length === 0) {\n    return null;\n  }\n\n  const handleTriggerActivation = (triggerId: string) => {\n    if (onTriggerAction) {\n      onTriggerAction(triggerId);\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <h3 className=\"font-medium text-sm flex items-center gap-2\">\n        <AlertTriangle className=\"h-4 w-4\" />\n        Triggers & Reminders\n      </h3>\n\n      {/* Due triggers */}\n      {dueTriggers.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-orange-600 dark:text-orange-400\">\n            Due This Round\n          </h4>\n\n          {dueTriggers.map((trigger) => (\n            <div\n              key={trigger.id}\n              className=\"flex items-center justify-between p-3 rounded border border-orange-300 bg-orange-50 dark:bg-orange-950/20\"\n              data-due=\"true\"\n            >\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-sm\">{trigger.name}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {trigger.description}\n                </div>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleTriggerActivation(trigger.id)}\n                aria-label={`Activate ${trigger.name}`}\n              >\n                Activate\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Upcoming triggers */}\n      {upcomingTriggers.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">\n            Upcoming\n          </h4>\n\n          {upcomingTriggers.slice(0, 3).map((trigger) => (\n            <div\n              key={trigger.id}\n              className=\"flex items-center justify-between p-2 rounded border\"\n            >\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-sm\">{trigger.name}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {trigger.description}\n                </div>\n              </div>\n\n              <div className=\"text-right text-sm\">\n                <div className=\"font-medium\">Round {trigger.triggerRound}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {formatTimeUntilTrigger(trigger, currentRound, duration.average)}\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {upcomingTriggers.length > 3 && (\n            <div className=\"text-xs text-muted-foreground text-center\">\n              +{upcomingTriggers.length - 3} more triggers\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Completed triggers */}\n      {triggers.some(t => !t.isActive) && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-muted-foreground\">\n            Completed\n          </h4>\n\n          {triggers\n            .filter(t => !t.isActive)\n            .slice(-2)\n            .map((trigger) => (\n              <div\n                key={trigger.id}\n                className=\"flex items-center justify-between p-2 rounded border bg-muted/20\"\n              >\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-sm text-muted-foreground\">\n                    {trigger.name}\n                  </div>\n                </div>\n\n                <div className=\"text-xs text-muted-foreground\">\n                  Triggered in Round {trigger.triggeredRound}\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface SessionSummaryProps {\n  summary: SessionSummary;\n}\n\nexport function SessionSummary({ summary }: SessionSummaryProps) {\n  return (\n    <div className=\"space-y-3\">\n      <h3 className=\"font-medium text-sm flex items-center gap-2\">\n        <TrendingUp className=\"h-4 w-4\" />\n        Session Summary\n      </h3>\n\n      <div className=\"text-sm text-muted-foreground\">\n        {formatRoundSummary(summary)}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/__tests__/hook-test-utils.ts","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":14,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":14,"endColumn":3,"fix":{"range":[536,538],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":15,"column":38,"nodeType":"Program","messageId":"trailingSpace","endLine":15,"endColumn":39,"fix":{"range":[576,577],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":18,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":18,"endColumn":3,"fix":{"range":[640,642],"text":""}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\nimport { IEncounter } from '@/lib/models/encounter/interfaces';\nimport { useRoundTracking } from '../useRoundTracking';\nimport { createMockEncounterWithRound, createUseRoundTrackingMocks } from './round-tracking-test-helpers';\n\n/**\n * Utility for rendering the useRoundTracking hook with standard setup\n */\nexport function renderRoundTrackingHook(\n  encounter: IEncounter = createMockEncounterWithRound(2),\n  options: any = {}\n) {\n  const mocks = createUseRoundTrackingMocks();\n  \n  const hookResult = renderHook(() => \n    useRoundTracking(encounter, mocks.onUpdate, options)\n  );\n  \n  return {\n    result: hookResult.result,\n    rerender: hookResult.rerender,\n    unmount: hookResult.unmount,\n    mocks,\n    encounter,\n  };\n}\n\n/**\n * Helper for performing actions and asserting round changes\n */\nexport function actAndExpectRoundChange(\n  result: any,\n  action: () => void,\n  expectedRound: number,\n  mockFn: jest.Mock\n) {\n  act(action);\n  expect(result.current.currentRound).toBe(expectedRound);\n  expect(mockFn).toHaveBeenCalledWith(expect.objectContaining({\n    currentRound: expectedRound,\n  }));\n}\n\n/**\n * Helper for testing effect expiration\n */\nexport function actAndExpectEffectExpiry(\n  result: any,\n  action: () => void,\n  expectedExpiredIds: string[],\n  onEffectExpiry: jest.Mock\n) {\n  act(action);\n  expect(onEffectExpiry).toHaveBeenCalledWith(expectedExpiredIds);\n}\n\n/**\n * Helper for testing trigger activation\n */\nexport function actAndExpectTriggerActivation(\n  result: any,\n  triggerId: string,\n  expectedTrigger: any,\n  onTriggerActivation: jest.Mock\n) {\n  act(() => {\n    result.current.activateTrigger(triggerId);\n  });\n  expect(onTriggerActivation).toHaveBeenCalledWith(triggerId, expectedTrigger);\n}\n\n/**\n * Helper for testing error states\n */\nexport function expectErrorState(result: any, expectedError: string) {\n  expect(result.current.error).toBe(expectedError);\n}\n\n/**\n * Helper for testing duration calculations\n */\nexport function expectDurationCalculation(\n  result: any,\n  expectedTotal: number,\n  expectedAverage: number,\n  expectedFormatted: string\n) {\n  expect(result.current.duration.totalSeconds).toBe(expectedTotal);\n  expect(result.current.duration.averageRoundDuration).toBe(expectedAverage);\n  expect(result.current.duration.formatted).toBe(expectedFormatted);\n}\n\n/**\n * Helper for testing effect remaining duration\n */\nexport function expectEffectRemainingDuration(\n  result: any,\n  effect: any,\n  expectedRemaining: number\n) {\n  const remaining = result.current.getEffectRemainingDuration(effect);\n  expect(remaining).toBe(expectedRemaining);\n}\n\n/**\n * Helper for testing history entries\n */\nexport function expectHistoryLength(result: any, expectedLength: number) {\n  expect(result.current.history).toHaveLength(expectedLength);\n}\n\nexport function expectHistoryEntry(\n  result: any,\n  entryIndex: number,\n  expectedRound: number,\n  expectedEvents: string[]\n) {\n  const entry = result.current.history[entryIndex];\n  expect(entry.round).toBe(expectedRound);\n  expect(entry.events).toEqual(expectedEvents);\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/__tests__/test-actions.ts","messages":[{"ruleId":"lines-around-comment","severity":1,"message":"Expected line before comment.","line":7,"column":3,"nodeType":"Block","messageId":"before","endLine":9,"endColumn":6,"fix":{"range":[169,169],"text":"\n"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":34,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":34,"endColumn":5,"fix":{"range":[955,959],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":38,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":38,"endColumn":5,"fix":{"range":[1118,1122],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":42,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":42,"endColumn":5,"fix":{"range":[1249,1253],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":47,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":47,"endColumn":5,"fix":{"range":[1371,1375],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":92,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":92,"endColumn":5,"fix":{"range":[2636,2640],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":95,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":95,"endColumn":5,"fix":{"range":[2778,2782],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":126,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":126,"endColumn":5,"fix":{"range":[3720,3724],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":132,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":132,"endColumn":5,"fix":{"range":[3888,3892],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":154,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":154,"endColumn":5,"fix":{"range":[4543,4547],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":156,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":156,"endColumn":5,"fix":{"range":[4581,4585],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":161,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":161,"endColumn":5,"fix":{"range":[4733,4737],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":171,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":171,"endColumn":5,"fix":{"range":[5020,5024],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":175,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":175,"endColumn":5,"fix":{"range":[5115,5119],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":177,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":177,"endColumn":5,"fix":{"range":[5157,5161],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":182,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":182,"endColumn":5,"fix":{"range":[5309,5313],"text":""}}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":15,"fixableWarningCount":1,"source":"import { screen, fireEvent, waitFor } from '@testing-library/react';\n\n/**\n * Centralized action helpers for round tracking tests\n */\nexport class RoundTrackingActions {\n  /**\n   * Clicks the next round button\n   */\n  static async clickNextRound() {\n    const button = screen.getByRole('button', { name: /next round/i });\n    fireEvent.click(button);\n    await waitFor(() => expect(button).toBeInTheDocument());\n    return button;\n  }\n\n  /**\n   * Clicks the previous round button\n   */\n  static async clickPreviousRound() {\n    const button = screen.getByRole('button', { name: /previous round/i });\n    fireEvent.click(button);\n    await waitFor(() => expect(button).toBeInTheDocument());\n    return button;\n  }\n\n  /**\n   * Edits the round number using the manual input\n   */\n  static async editRound(newRound: number) {\n    // Click edit button\n    const editButton = screen.getByRole('button', { name: /edit round/i });\n    fireEvent.click(editButton);\n    \n    // Change input value\n    const input = screen.getByLabelText(/current round/i);\n    fireEvent.change(input, { target: { value: newRound.toString() } });\n    \n    // Save the change\n    const saveButton = screen.getByRole('button', { name: /save/i });\n    fireEvent.click(saveButton);\n    \n    await waitFor(() => {\n      // Verify the edit was successful\n      expect(input).toHaveValue(newRound);\n    });\n    \n    return { input, saveButton };\n  }\n\n  /**\n   * Cancels round editing\n   */\n  static async cancelRoundEdit() {\n    const cancelButton = screen.getByRole('button', { name: /cancel/i });\n    fireEvent.click(cancelButton);\n    await waitFor(() => expect(cancelButton).toBeInTheDocument());\n    return cancelButton;\n  }\n\n  /**\n   * Activates a trigger by name\n   */\n  static async activateTrigger(triggerName: string) {\n    const activateButton = screen.getByRole('button', {\n      name: new RegExp(`activate ${triggerName}`, 'i')\n    });\n    fireEvent.click(activateButton);\n    await waitFor(() => expect(activateButton).toBeInTheDocument());\n    return activateButton;\n  }\n\n  /**\n   * Toggles history display\n   */\n  static async toggleHistory() {\n    const historyButton = screen.getByRole('button', { name: /show history|hide history/i });\n    fireEvent.click(historyButton);\n    await waitFor(() => expect(historyButton).toBeInTheDocument());\n    return historyButton;\n  }\n\n  /**\n   * Searches history with given query\n   */\n  static async searchHistory(query: string) {\n    // First expand search if needed\n    const searchButton = screen.queryByRole('button', { name: /show search/i });\n    if (searchButton) {\n      fireEvent.click(searchButton);\n    }\n    \n    const searchInput = screen.getByPlaceholderText(/search history/i);\n    fireEvent.change(searchInput, { target: { value: query } });\n    \n    await waitFor(() => expect(searchInput).toHaveValue(query));\n    return searchInput;\n  }\n\n  /**\n   * Clears history search\n   */\n  static async clearHistorySearch() {\n    const clearButton = screen.getByRole('button', { name: /clear search/i });\n    fireEvent.click(clearButton);\n    await waitFor(() => expect(clearButton).toBeInTheDocument());\n    return clearButton;\n  }\n\n  /**\n   * Clicks export button\n   */\n  static async clickExport() {\n    const exportButton = screen.getByRole('button', { name: /export/i });\n    fireEvent.click(exportButton);\n    await waitFor(() => expect(exportButton).toBeInTheDocument());\n    return exportButton;\n  }\n\n  /**\n   * Removes an effect (if remove button exists)\n   */\n  static async removeEffect(effectName: string) {\n    const effectElement = screen.getByText(effectName);\n    const removeButton = effectElement.closest('[data-testid^=\"effect\"]')?.querySelector('[data-action=\"remove\"]');\n    \n    if (removeButton) {\n      fireEvent.click(removeButton);\n      await waitFor(() => expect(removeButton).toBeInTheDocument());\n      return removeButton;\n    }\n    \n    throw new Error(`Remove button not found for effect: ${effectName}`);\n  }\n\n  /**\n   * Sets round input value during editing\n   */\n  static async setRoundInput(value: string) {\n    const input = screen.getByLabelText(/current round/i);\n    fireEvent.change(input, { target: { value } });\n    await waitFor(() => {\n      expect(input).toHaveValue(parseInt(value, 10));\n    });\n    return input;\n  }\n\n  /**\n   * Performs a complete round advance sequence\n   */\n  static async advanceRound() {\n    const initialRoundText = screen.getByText(/round \\d+/i).textContent;\n    const currentRound = parseInt(initialRoundText?.match(/\\d+/)?.[0] || '1', 10);\n    \n    await this.clickNextRound();\n    \n    // Wait for round to update\n    await waitFor(() => {\n      expect(screen.getByText(`Round ${currentRound + 1}`)).toBeInTheDocument();\n    });\n    \n    return currentRound + 1;\n  }\n\n  /**\n   * Performs a complete round retreat sequence\n   */\n  static async retreatRound() {\n    const initialRoundText = screen.getByText(/round \\d+/i).textContent;\n    const currentRound = parseInt(initialRoundText?.match(/\\d+/)?.[0] || '1', 10);\n    \n    if (currentRound <= 1) {\n      throw new Error('Cannot retreat below round 1');\n    }\n    \n    await this.clickPreviousRound();\n    \n    // Wait for round to update\n    await waitFor(() => {\n      expect(screen.getByText(`Round ${currentRound - 1}`)).toBeInTheDocument();\n    });\n    \n    return currentRound - 1;\n  }\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/__tests__/test-assertions.ts","messages":[{"ruleId":"lines-around-comment","severity":1,"message":"Expected line before comment.","line":7,"column":3,"nodeType":"Block","messageId":"before","endLine":9,"endColumn":6,"fix":{"range":[155,155],"text":"\n"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":98,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":98,"endColumn":5,"fix":{"range":[3154,3158],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":103,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":103,"endColumn":5,"fix":{"range":[3333,3337],"text":""}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":1,"source":"import { screen } from '@testing-library/react';\n\n/**\n * Centralized assertion helpers for round tracking tests\n */\nexport class RoundTrackingAssertions {\n  /**\n   * Asserts that a round change callback was called with expected parameters\n   */\n  static expectRoundChange(mockFn: jest.Mock, expectedRound: number) {\n    expect(mockFn).toHaveBeenCalledWith(expect.objectContaining({\n      currentRound: expectedRound,\n    }));\n  }\n\n  /**\n   * Asserts that effect expiry callback was called with expected effect IDs\n   */\n  static expectEffectExpiry(mockFn: jest.Mock, effectIds: string[]) {\n    expect(mockFn).toHaveBeenCalledWith(effectIds);\n  }\n\n  /**\n   * Asserts that trigger activation callback was called\n   */\n  static expectTriggerActivation(mockFn: jest.Mock, triggerId: string, trigger?: any) {\n    if (trigger) {\n      expect(mockFn).toHaveBeenCalledWith(triggerId, trigger);\n    } else {\n      expect(mockFn).toHaveBeenCalledWith(triggerId);\n    }\n  }\n\n  /**\n   * Asserts that the round display shows the expected round number\n   */\n  static expectRoundDisplay(round: number) {\n    expect(screen.getByText(`Round ${round}`)).toBeInTheDocument();\n  }\n\n  /**\n   * Asserts that an effect is displayed with remaining duration\n   */\n  static expectEffectDisplay(effectName: string, remainingRounds?: number) {\n    expect(screen.getByText(effectName)).toBeInTheDocument();\n    if (remainingRounds !== undefined) {\n      expect(screen.getByText(`${remainingRounds} rounds`)).toBeInTheDocument();\n    }\n  }\n\n  /**\n   * Asserts that a trigger is displayed with expected round\n   */\n  static expectTriggerDisplay(triggerName: string, triggerRound?: number) {\n    expect(screen.getByText(triggerName)).toBeInTheDocument();\n    if (triggerRound !== undefined) {\n      expect(screen.getByText(`Round ${triggerRound}`)).toBeInTheDocument();\n    }\n  }\n\n  /**\n   * Asserts that duration is displayed correctly\n   */\n  static expectDurationDisplay(formatted: string) {\n    expect(screen.getByText(new RegExp(formatted, 'i'))).toBeInTheDocument();\n  }\n\n  /**\n   * Asserts that error message is displayed\n   */\n  static expectErrorMessage(message: string) {\n    expect(screen.getByText(message)).toBeInTheDocument();\n  }\n\n  /**\n   * Asserts that no error is displayed\n   */\n  static expectNoError() {\n    const errorElements = screen.queryAllByRole('alert');\n    const errorTexts = errorElements.map(el => el.textContent);\n    expect(errorTexts.filter(text => text && text.includes('error'))).toHaveLength(0);\n  }\n\n  /**\n   * Asserts that accessibility elements are present\n   */\n  static expectAccessibleRoundControls() {\n    expect(screen.getByRole('button', { name: /next round/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /previous round/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /edit round/i })).toBeInTheDocument();\n  }\n\n  /**\n   * Asserts that session summary is displayed with expected values\n   */\n  static expectSessionSummary(summary: { totalRounds: number; totalDuration: number; totalActions?: number }) {\n    expect(screen.getByText(`${summary.totalRounds} rounds`)).toBeInTheDocument();\n    \n    if (summary.totalDuration) {\n      const minutes = Math.floor(summary.totalDuration / 60);\n      expect(screen.getByText(`${minutes}m total`)).toBeInTheDocument();\n    }\n    \n    if (summary.totalActions) {\n      expect(screen.getByText(`${summary.totalActions} actions`)).toBeInTheDocument();\n    }\n  }\n\n  /**\n   * Asserts that history entry is displayed\n   */\n  static expectHistoryEntry(round: number, event: string) {\n    const historySection = screen.getByText('Round History').closest('[data-testid=\"history-section\"]');\n    if (historySection) {\n      expect(historySection).toHaveTextContent(`Round ${round}`);\n      expect(historySection).toHaveTextContent(event);\n    } else {\n      expect(screen.getByText(`Round ${round}`)).toBeInTheDocument();\n      expect(screen.getByText(event)).toBeInTheDocument();\n    }\n  }\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/__tests__/test-setup-factory.ts","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":2,"column":9,"nodeType":"Program","messageId":"trailingSpace","endLine":2,"endColumn":10,"fix":{"range":[72,73],"text":""}},{"ruleId":"no-unused-vars","severity":2,"message":"'createTestEncounter' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"createTestEncounter"},"fix":{"range":[76,96],"text":""},"desc":"Remove unused variable 'createTestEncounter'."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":3,"column":23,"nodeType":"Program","messageId":"trailingSpace","endLine":3,"endColumn":24,"fix":{"range":[96,97],"text":""}},{"ruleId":"no-unused-vars","severity":2,"message":"'makeEncounterActive' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"makeEncounterActive"},"fix":{"range":[95,119],"text":""},"desc":"Remove unused variable 'makeEncounterActive'."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":4,"column":23,"nodeType":"Program","messageId":"trailingSpace","endLine":4,"endColumn":24,"fix":{"range":[120,121],"text":""}},{"ruleId":"no-unused-vars","severity":2,"message":"'PARTICIPANT_IDS' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"PARTICIPANT_IDS"},"fix":{"range":[119,139],"text":""},"desc":"Remove unused variable 'PARTICIPANT_IDS'."}]},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":44,"column":10,"nodeType":"Program","messageId":"trailingSpace","endLine":44,"endColumn":11,"fix":{"range":[1068,1069],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":45,"column":15,"nodeType":"Program","messageId":"trailingSpace","endLine":45,"endColumn":16,"fix":{"range":[1084,1085],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":46,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":46,"endColumn":26,"fix":{"range":[1110,1111],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":47,"column":26,"nodeType":"Program","messageId":"trailingSpace","endLine":47,"endColumn":27,"fix":{"range":[1137,1138],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":52,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":52,"endColumn":3,"fix":{"range":[1222,1224],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":55,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":55,"endColumn":3,"fix":{"range":[1325,1327],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":59,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":59,"endColumn":3,"fix":{"range":[1484,1486],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":69,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":69,"endColumn":3,"fix":{"range":[1629,1631],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":84,"column":10,"nodeType":"Program","messageId":"trailingSpace","endLine":84,"endColumn":11,"fix":{"range":[1891,1892],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":85,"column":15,"nodeType":"Program","messageId":"trailingSpace","endLine":85,"endColumn":16,"fix":{"range":[1907,1908],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":86,"column":25,"nodeType":"Program","messageId":"trailingSpace","endLine":86,"endColumn":26,"fix":{"range":[1933,1934],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":90,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":90,"endColumn":3,"fix":{"range":[1991,1993],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":93,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":93,"endColumn":3,"fix":{"range":[2098,2100],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":96,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":96,"endColumn":3,"fix":{"range":[2206,2208],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":102,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":102,"endColumn":3,"fix":{"range":[2313,2315],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":117,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":117,"endColumn":3,"fix":{"range":[2590,2592],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":122,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":122,"endColumn":3,"fix":{"range":[2701,2703],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":131,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":131,"endColumn":3,"fix":{"range":[2881,2883],"text":""}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":136,"column":1,"nodeType":"Program","messageId":"trailingSpace","endLine":136,"endColumn":3,"fix":{"range":[2983,2985],"text":""}}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":22,"fixableWarningCount":0,"source":"import { IEncounter } from '@/lib/models/encounter/interfaces';\nimport { \n  createTestEncounter, \n  makeEncounterActive, \n  PARTICIPANT_IDS,\n  createMockEncounterWithRound,\n  createRoundTrackerMocks,\n  createUseRoundTrackingMocks,\n  TEST_EFFECTS,\n  TEST_TRIGGERS,\n  TEST_HISTORY,\n} from './round-tracking-test-helpers';\n\nexport interface TestSetupOptions {\n  round?: number;\n  withEffects?: boolean;\n  withTriggers?: boolean;\n  withHistory?: boolean;\n  estimatedRoundDuration?: number;\n  maxRounds?: number;\n}\n\nexport interface RoundTrackingTestSetup {\n  encounter: IEncounter;\n  mocks: ReturnType<typeof createRoundTrackerMocks>;\n  effects: any[];\n  triggers: any[];\n  history: any[];\n  defaultProps: any;\n}\n\nexport interface HookTestSetup {\n  encounter: IEncounter;\n  mocks: ReturnType<typeof createUseRoundTrackingMocks>;\n  effects: any[];\n  triggers: any[];\n  options: any;\n}\n\n/**\n * Creates a standardized test setup for round tracking components\n */\nexport function createRoundTrackingTestSetup(options: TestSetupOptions = {}): RoundTrackingTestSetup {\n  const { \n    round = 2, \n    withEffects = false, \n    withTriggers = false, \n    withHistory = false,\n    estimatedRoundDuration,\n    maxRounds,\n  } = options;\n  \n  const encounter = createMockEncounterWithRound(round);\n  const mocks = createRoundTrackerMocks();\n  \n  const effects = withEffects ? TEST_EFFECTS : [];\n  const triggers = withTriggers ? TEST_TRIGGERS : [];\n  const history = withHistory ? TEST_HISTORY : [];\n  \n  const defaultProps = {\n    encounter,\n    effects,\n    triggers,\n    history,\n    estimatedRoundDuration,\n    maxRounds,\n    ...mocks,\n  };\n  \n  return {\n    encounter,\n    mocks,\n    effects,\n    triggers,\n    history,\n    defaultProps,\n  };\n}\n\n/**\n * Creates a standardized test setup for hook testing\n */\nexport function createHookTestSetup(options: TestSetupOptions = {}): HookTestSetup {\n  const { \n    round = 2, \n    withEffects = false, \n    withTriggers = false,\n    maxRounds,\n  } = options;\n  \n  const encounter = createMockEncounterWithRound(round);\n  const mocks = createUseRoundTrackingMocks();\n  \n  const effects = withEffects ? TEST_EFFECTS : [];\n  const triggers = withTriggers ? TEST_TRIGGERS : [];\n  \n  const hookOptions = {\n    initialEffects: effects,\n    initialTriggers: triggers,\n    maxRounds,\n  };\n  \n  return {\n    encounter,\n    mocks,\n    effects,\n    triggers,\n    options: hookOptions,\n  };\n}\n\n/**\n * Standard beforeEach setup for round tracking tests\n */\nexport function setupRoundTrackingTest(options: TestSetupOptions = {}) {\n  let testSetup: RoundTrackingTestSetup;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    testSetup = createRoundTrackingTestSetup(options);\n  });\n  \n  return () => testSetup;\n}\n\n/**\n * Standard beforeEach setup for hook tests\n */\nexport function setupHookTest(options: TestSetupOptions = {}) {\n  let testSetup: HookTestSetup;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    testSetup = createHookTestSetup(options);\n  });\n  \n  return () => testSetup;\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/history-hooks.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'query' is defined but never used. Allowed unused args must match /^_/u.","line":59,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"query"},"fix":{"range":[1458,1471],"text":""},"desc":"Remove unused variable 'query'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'expanded' is defined but never used. Allowed unused args must match /^_/u.","line":60,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"expanded"},"fix":{"range":[1506,1523],"text":""},"desc":"Remove unused variable 'expanded'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport {\n  HistoryEntry,\n  HistoryStats,\n  calculateHistoryStats,\n  filterHistoryBySearch,\n  virtualizeHistory,\n} from './history-utils';\nimport { searchHistory } from './round-utils';\n\n/**\n * Custom hook for history search functionality\n */\nexport function useHistorySearch(history: HistoryEntry[], searchQuery: string): HistoryEntry[] {\n  return useMemo(() => {\n    return filterHistoryBySearch(history, searchQuery, searchHistory);\n  }, [history, searchQuery]);\n}\n\n/**\n * Custom hook for virtualized history display\n */\nexport function useVirtualizedHistory(\n  filteredHistory: HistoryEntry[],\n  virtualized: boolean,\n  maxVisibleRounds: number\n): HistoryEntry[] {\n  return useMemo(() => {\n    return virtualizeHistory(filteredHistory, virtualized, maxVisibleRounds);\n  }, [filteredHistory, virtualized, maxVisibleRounds]);\n}\n\n/**\n * Custom hook for history statistics\n */\nexport function useHistoryStats(history: HistoryEntry[]): HistoryStats {\n  return useMemo(() => {\n    return calculateHistoryStats(history);\n  }, [history]);\n}\n\n/**\n * Custom hook for history handlers\n */\nexport function useHistoryHandlers({\n  history,\n  isCollapsed,\n  isSearchExpanded,\n  onToggle,\n  onExport,\n  setSearchQuery,\n  setIsSearchExpanded,\n}: {\n  history: HistoryEntry[];\n  isCollapsed: boolean;\n  isSearchExpanded: boolean;\n  onToggle: (_collapsed: boolean) => void;\n  onExport?: (_history: HistoryEntry[]) => void;\n  setSearchQuery: (query: string) => void;\n  setIsSearchExpanded: (expanded: boolean) => void;\n}) {\n  const handleToggle = () => {\n    if (history.length === 0) return;\n    onToggle(!isCollapsed);\n  };\n\n  const handleExport = () => {\n    if (onExport && history.length > 0) {\n      onExport(history);\n    }\n  };\n\n  const handleSearchToggle = () => {\n    setIsSearchExpanded(!isSearchExpanded);\n    if (isSearchExpanded) {\n      setSearchQuery('');\n    }\n  };\n\n  return {\n    handleToggle,\n    handleExport,\n    handleSearchToggle,\n  };\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]},{"filePath":"/home/doug/dev/dnd-tracker-next-js/src/components/combat/round-tracking/history-utils.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '>' expected.","line":48,"column":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport interface HistoryEvent {\n  text: string;\n  timestamp?: Date;\n}\n\nexport interface HistoryEntry {\n  round: number;\n  events: (string | HistoryEvent)[];\n}\n\nexport interface HistoryStats {\n  totalRounds: number;\n  totalEvents: number;\n}\n\n/**\n * Formats a history event, handling both string and object formats\n */\nexport function formatHistoryEvent(\n  event: string | HistoryEvent,\n  eventFormatter?: (event: string) => string\n): { text: string; timestamp?: Date } {\n  if (typeof event === 'string') {\n    const formattedText = eventFormatter ? eventFormatter(event) : event;\n    return { text: formattedText };\n  }\n\n  const formattedText = eventFormatter ? eventFormatter(event.text) : event.text;\n  return { text: formattedText, timestamp: event.timestamp };\n}\n\n/**\n * Creates highlighted text with search term highlighting\n */\nexport function createHighlightedText(text: string, query: string): React.ReactNode {\n  if (!query.trim()) {\n    return text;\n  }\n\n  const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n  const parts = text.split(regex);\n\n  return parts.map((part, index) => {\n    const isMatch = regex.test(part) && part.toLowerCase() === query.toLowerCase();\n    return isMatch ? (\n      <span key={index} className=\"highlight bg-yellow-200 dark:bg-yellow-800 px-1 rounded\">\n        {part}\n      </span>\n    ) : (\n      part\n    );\n  });\n}\n\n/**\n * Formats a timestamp for display\n */\nexport function formatEventTimestamp(timestamp: Date): string {\n  return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n}\n\n/**\n * Calculates history statistics\n */\nexport function calculateHistoryStats(history: HistoryEntry[]): HistoryStats {\n  const totalRounds = history.length;\n  const totalEvents = history.reduce((total, entry) => total + entry.events.length, 0);\n  return { totalRounds, totalEvents };\n}\n\n/**\n * Filters history based on search query\n */\nexport function filterHistoryBySearch(\n  history: HistoryEntry[],\n  searchQuery: string,\n  searchHistory: (entries: { round: number; events: string[] }[], query: string) => HistoryEntry[]\n): HistoryEntry[] {\n  if (!searchQuery.trim()) {\n    return history;\n  }\n\n  return searchHistory(\n    history.map(entry => ({\n      round: entry.round,\n      events: entry.events.map(event =>\n        typeof event === 'string' ? event : event.text\n      ),\n    })),\n    searchQuery\n  );\n}\n\n/**\n * Applies virtualization to history data\n */\nexport function virtualizeHistory(\n  filteredHistory: HistoryEntry[],\n  virtualized: boolean,\n  maxVisibleRounds: number\n): HistoryEntry[] {\n  if (!virtualized || filteredHistory.length <= maxVisibleRounds) {\n    return filteredHistory;\n  }\n\n  // Show most recent rounds\n  return filteredHistory.slice(-maxVisibleRounds);\n}","usedDeprecatedRules":[{"ruleId":"lines-around-comment","replacedBy":["@stylistic/lines-around-comment"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-around-comment","url":"https://eslint.style/rules/lines-around-comment"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/no-multiple-empty-lines"}}]}},{"ruleId":"no-trailing-spaces","replacedBy":["@stylistic/no-trailing-spaces"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-trailing-spaces","url":"https://eslint.style/rules/no-trailing-spaces"}}]}},{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/padding-line-between-statements"}}]}},{"ruleId":"lines-between-class-members","replacedBy":["@stylistic/lines-between-class-members"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"lines-between-class-members","url":"https://eslint.style/rules/lines-between-class-members"}}]}}]}]

info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/app/api-reference/config/eslint#disabling-rules
